(@ include <janet.h>)
(@ include <ctype.h>)
(@ define SCORE_MAX INFINITY)
(@ define SCORE_MIN -INFINITY)
(@ define MATCH_MAX_LEN 1024)
(@ define SCORE_GAP_LEADING -0.005)
(@ define SCORE_GAP_TRAILING -0.005)
(@ define SCORE_GAP_INNER -0.01)
(@ define SCORE_MATCH_CONSECUTIVE 1.0)
(@ define SCORE_MATCH_SLASH 0.9)
(@ define SCORE_MATCH_WORD 0.8)
(@ define SCORE_MATCH_CAPITAL 0.7)
(@ define SCORE_MATCH_DOT 0.6)

($ (use ./code))

(deft score_t double)

($ bonus-states)
($ bonus-index)

(def nil
  (named-struct
    match_struct
    needle_len int
    haystack_len int
    "lower_needle[MATCH_MAX_LEN]" uint8_t
    "lower_haystack[MATCH_MAX_LEN]" uint8_t
    "match_bonus[MATCH_MAX_LEN]" score_t)
  nil)

(defn [static] precompute_bonus
  [(*haystack (const uint8_t)) (*match_bonus score_t)] void
  (def last_ch uint8_t (literal "'/'"))
  (def i int 0)
  (while (index haystack i)
    (def ch uint8_t (index haystack i))
    (set (index match_bonus i)
         (index (index bonuss_states
                       (index bonuss_index ch)) last_ch))
    (set last_ch ch)
    ++i))

(defn [static] setup_match_struct
  [(*match (named-struct match_struct))
   (*needle (const uint8_t)) (*haystack (const uint8_t))] void
  (set match->needle_len (strlen needle))
  (set match->haystack_len (strlen haystack))
  (if (not
        (or (> match->haystack_len MATCH_MAX_LEN)
            (> match->needle_len match->haystack_len)))
    (do
      (def i int 0)
      (while (< i match->needle_len)
        (set (index match->lower_needle i) (tolower (index needle i)))
        (++ i))
      (set i 0)
      (while (< i match->haystack_len)
        (set (index match->lower_haystack i) (tolower (index haystack i)))
        (++ i))
      (precompute_bonus haystack match->match_bonus))))

(defn [static inline] match_row
  [(*match (const (named-struct match_struct))) (row int)
   (*curr_D score_t) (*curr_M score_t)
   (*last_D (const score_t)) (*last_M (const score_t))] void
  (def i int row)
  (def *match_bonus (const score_t) match->match_bonus)
  (def prev_score score_t SCORE_MIN)
  (def gap_score score_t nil)
  (if (== i (- match->needle_len 1))
    (set gap_score SCORE_GAP_TRAILING)
    (set gap_score SCORE_GAP_INNER))
  (def j int 0)
  (while (< j match->haystack_len)
    (if (== (index match->lower_needle i) (index match->lower_haystack j))
      (do
        (def score score_t SCORE_MIN)
        (if (not i)
          (set score (+ (* j SCORE_GAP_LEADING) (index match_bonus j)))
          j
          (do
            (def a score_t (+ (index last_M (- j 1)) (index match_bonus j)))
            (def b score_t (+ (index last_D (- j 1)) SCORE_MATCH_CONSECUTIVE))
            (if (> a b) (set score a) (set score b))))
        (set (index curr_D j) score)
        (if (> score (+ prev_score gap_score))
          (set prev_score score)
          (set prev_score (+ prev_score gap_score)))
        (set (index curr_M j) prev_score))
      (do
        (set (index curr_D j) SCORE_MIN)
        (set prev_score (+ prev_score gap_score))
        (set (index curr_M j) prev_score)))
    ++j))

(defn [static inline] _has_match [(*needle (const uint8_t)) (*haystack (const uint8_t))] int
  (while *needle
    (def nch uint8_t *needle++)
    (def "accept[3]" (const uint8_t) (array nch (toupper nch) 0))
    (if (! (set haystack (strpbrk haystack accept)))
      (return 0))
    ++haystack)
  (return 1))

($ (def-cfun-with-needle-n-haystack has-match
     ```
     (has-match needle haystack)

     Checks if needle has match in haystack. Returns boolean.
     ```

     (return (janet_wrap_boolean (_has_match needle haystack)))))

($ (def-cfun-with-needle-n-haystack score
     ```
     (score needle haystack)

     Computes score for the needle in the haystack. Returns number.
     ```
     (if (or (not *needle) (not (_has_match needle haystack)))
       (return (janet_wrap_number SCORE_MIN)))
     (def match (named-struct match_struct) nil)
     (setup_match_struct (addr match) needle haystack)

     (def n int match.needle_len)
     (def m int match.haystack_len)

     (if
       (or (> m MATCH_MAX_LEN) (> n m))
       (return (janet_wrap_number SCORE_MIN))
       (== n m)
       (return (janet_wrap_number SCORE_MAX)))
     (def "D[2][MATCH_MAX_LEN]" score_t nil)
     (def "M[2][MATCH_MAX_LEN]" score_t nil)
     (def *last_D score_t (index D 0))
     (def *last_M score_t (index M 0))
     (def *curr_D score_t (index D 1))
     (def *curr_M score_t (index M 1))
     (def i int 0)
     (def *tmp score_t nil)
     (while (< i n)
       (match_row (addr match) i curr_D curr_M last_D last_M)
       (set tmp last_D)
       (set last_D curr_D)
       (set curr_D tmp)
       (set tmp last_M)
       (set last_M curr_M)
       (set curr_M tmp)
       ++i)
     (return (janet_wrap_number (index last_M (- m 1))))))

($ (def-cfun-with-needle-n-haystack positions
     ```
     (positions needle haystack)

     Computes positions for the needle in the haystack. Returns array of positions.
     ```
     (def match (named-struct match_struct) nil)
     (setup_match_struct (addr match) needle haystack)
     (def n int match.needle_len)
     (def m int match.haystack_len)
     (def *array JanetArray (janet_array n))
     (def warr Janet (janet_wrap_array array))
     (if (or (not *needle)
             (not (_has_match needle haystack)))
       (return warr))
     (if
       (or (> m MATCH_MAX_LEN) (> n m))
       (return (janet_wrap_array array))
       (== n m)
       (do
         (def i int 0)
         (while (< i n)
           (janet_array_push array (janet_wrap_number i))
           (++ i))
         (return warr)))
     (def "(*D)[MATCH_MAX_LEN]" score_t nil)
     (def "(*M)[MATCH_MAX_LEN]" score_t nil)
     (set M (janet_malloc (* (sizeof score_t) MATCH_MAX_LEN n)))
     (set D (janet_malloc (* (sizeof score_t) MATCH_MAX_LEN n)))
     (def *last_D score_t (index D 0))
     (def *last_M score_t (index M 0))
     (def *curr_D score_t (index D 1))
     (def *curr_M score_t (index M 1))
     (def i int 0)
     (while (< i n)
       (set curr_D (addr (index (index D i) 0)))
       (set curr_M (addr (index (index M i) 0)))
       (match_row (addr match) i curr_D curr_M last_D last_M)
       (set last_D curr_D)
       (set last_M curr_M)
       (++ i))
     (def match_required int 0)
     (set i (- n 1))
     (def j int (- m 1))
     (while (>= i 0)
       (while (>= j 0)
         (if (and (!= (index (index D i) j) SCORE_MIN)
                  (or match_required (== (index (index D i) j)
                                         (index (index M i) j))))
           (do
             (set match_required
                  (and i j (== (index (index M i) j)
                               (+ (index (index D (- i 1)) (- j 1))
                                  SCORE_MATCH_CONSECUTIVE))))
             (janet_putindex warr i (janet_wrap_number j))
             (-- j)
             (break)))
         (-- j))
       (-- i))
     (janet_free D)
     (janet_free M)
     (return warr)))

($ (def-cfuns))


(defn JANET_MODULE_ENTRY [(env JanetTable*)] nil
  (janet_def env "score-min" (janet_wrap_integer SCORE_MIN) "Minimal possible score.")
  (janet_def env "score-max" (janet_wrap_integer SCORE_MAX) "Maximal possible score.")
  (janet_cfuns env "fzy" cfuns))
