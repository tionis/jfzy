(@ include <janet.h>)
(@ include <stdlib.h>)
(@ include `"match.h"`)

(defn *janet_bytes_to_cstring [(bv JanetByteView)] "const char"
  (return (janet_string bv.bytes bv.len)))

(defn [static] cfun_has_match [(argc int32_t) (*argv Janet)] Janet
  (janet_fixarity argc 2)
  (def *needle (const char) (janet_bytes_to_cstring (janet_getbytes argv 0)))
  (def *haystack (const char) (janet_bytes_to_cstring (janet_getbytes argv 1)))
  (return (janet_wrap_boolean (has_match needle haystack))))

(defn [static] cfun_score [(argc int32_t) (*argv Janet)] Janet
  (janet_fixarity argc 2)
  (def *needle (const char) (janet_bytes_to_cstring (janet_getbytes argv 0)))
  (def *haystack (const char) (janet_bytes_to_cstring (janet_getbytes argv 1)))
  (return (janet_wrap_number (match needle haystack))))

(defn [static] cfun_positions [(argc int32_t) (*argv Janet)] Janet
  (janet_fixarity argc 2)
  (def *needle (const char) (janet_bytes_to_cstring (janet_getbytes argv 0)))
  (def *haystack (const char) (janet_bytes_to_cstring (janet_getbytes argv 1)))
  (def n int (strlen needle))
  (def "positions[MATCH_MAX_LEN]" size_t nil)
  (def i int 0)
  (while (and (< i (+ n 1)) (< i MATCH_MAX_LEN))
    (do
      (set (index positions i) -1)
      (++ i)))
  (match_positions needle haystack (addr (index positions 0)))
  (def *array JanetArray (janet_array 0))
  (set i 0)
  (while (not (== (index positions i) -1))
    (do
      (janet_array_push array (janet_wrap_number (index positions i)))
      (++ i)))
  (return (janet_wrap_array array)))

(def "cfuns[]" JanetReg
  (array
    (array "has-match" cfun_has_match "(has-match needle haystack)\n\nChecks if needle has match in haystack. Returns boolean.")
    (array "score" cfun_score "(score needle haystack)\n\nComputes score for the needle in the haystack. Returns number.")
    (array "positions" cfun_positions "(positions needle haystack)\n\nComputes positions for the needle in the haystack. Returns array of positions.")
    (array NULL NULL NULL)))

(defn JANET_MODULE_ENTRY [(env JanetTable*)] nil
  (janet_cfuns env "fzy" cfuns)
  (janet_def env "score-min" (janet_wrap_integer SCORE_MIN) "Minimal possible score.")
  (janet_def env "score-max" (janet_wrap_integer SCORE_MAX) "Maximal possible score."))
