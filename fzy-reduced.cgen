(@ include <janet.h>)
(@ include <ctype.h>)
(@ include <stdlib.h>)
(@ include <string.h>)
(@ include <strings.h>)
(@ include <stdio.h>)
(@ include `"match.h"`)

(@ define SCORE_GAP_LEADING -0.005)
(@ define SCORE_GAP_TRAILING -0.005)
(@ define SCORE_GAP_INNER -0.01)
(@ define SCORE_MATCH_CONSECUTIVE 1.0)
(@ define SCORE_MATCH_SLASH 0.9)
(@ define SCORE_MATCH_WORD 0.8)
(@ define SCORE_MATCH_CAPITAL 0.7)
(@ define SCORE_MATCH_DOT 0.6)


($ (use ./code))

($ bonus-states)
($ bonus-index)

# FZY code
($ (def-cfun-with-needle-n-haystack has-match
     ```
     (has-match needle haystack)

     Checks if needle has match in haystack. Returns boolean.
     ```
     (while *needle
       (do
         (def nch char *needle++)
         (def "accept[3]" (const char) (array nch (toupper nch) 0))
         (if (! (set haystack (strpbrk haystack accept)))
           (return (janet_wrap_boolean 0)))
         ++haystack))
     (return (janet_wrap_boolean 1))))

($ (def-cfun-with-needle-n-haystack score
     ```
     (score needle haystack)

     Computes score for the needle in the haystack. Returns number.
     ```
     (janet_wrap_number (match needle haystack))))

($ (def-cfun-with-needle-n-haystack positions
     ```
     (positions needle haystack)

     Computes positions for the needle in the haystack. Returns array of positions.
     ```
     (def n int (strlen needle))
     (def "positions[MATCH_MAX_LEN]" size_t nil)
     (def i int 0)
     (while (and (< i (+ n 1)) (< i MATCH_MAX_LEN))
       (set (index positions i++) -1))
     (match_positions needle haystack (addr (index positions 0)))
     (def *array JanetArray (janet_array 0))
     (set i 0)
     (while (not (== (index positions i) -1))
       (janet_array_push array (janet_wrap_number (index positions i++))))
     (return (janet_wrap_array array))))

($ (def-cfuns))


(defn JANET_MODULE_ENTRY [(env JanetTable*)] nil
  (janet_cfuns env "fzy" cfuns)
  (janet_def env "score-min" (janet_wrap_integer SCORE_MIN) "Minimal possible score.")
  (janet_def env "score-max" (janet_wrap_integer SCORE_MAX) "Maximal possible score."))
